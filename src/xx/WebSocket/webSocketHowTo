how to create websocket client and connect

	add websocket libs for client 
	tyrus-standalone-client-1.13.jar
	
======================================================	
	create endpoint class for client and annotate it
		@ClientEndpoint
	
	create objects Session and MessageHandler
	create constructor which takes URI and creates
	WebSocketContainer object and obtain new instance of container with
	WebSocketContainer container = ContainerProvider.getWebSocketContainer();
	and try to connect container by 
	connectToServer() method with session and uri object
	
	than with @OnOpen annotation
	create onOpen() method which takes session object and sets it 
	to objects session( just like simple setter for session)
	
	than with @onClose annotation
	create onClose() method, takes session and closeReason objects
	method - equates session to null
	this.session = null;
	
	than with @OnMessage annotation
	create onMessage() method - takes string
	and if messageHandler is not null puts string inside
		if (this.messageHandler != null) {
	            this.messageHandler.handleMessage(message);
	        } 

	create method addMessageHandler - takes messageHandler and sets it to object
	(setter for messageHandler)
		this.messageHandler = msgHandler;     
        
     create method setMessage() - takes string message and invokes sendTex() method with it
    	 this.session.getAsyncRemote().sendText(message);   
        
	create static interface MessageHandler with method
		handleMessage(String message)        
        
   together class looks like
   	import java.io.IOException;
		import java.net.URI;
		
		import javax.websocket.ClientEndpoint;
		import javax.websocket.CloseReason;
		import javax.websocket.ContainerProvider;
		import javax.websocket.DeploymentException;
		import javax.websocket.OnClose;
		import javax.websocket.OnMessage;
		import javax.websocket.OnOpen;
		import javax.websocket.Session;
		import javax.websocket.WebSocketContainer;
		
		@ClientEndpoint
		public class ClientEndPoint {
		
			Session session = null;
			private MessageHandler messageHandler;
		
			// constructor
			public ClientEndPoint(URI endpointURI) {
				// A WebSocketContainer is an implementation provided object that
				// provides applications a view on the container running it.
				WebSocketContainer container = ContainerProvider.getWebSocketContainer();
				try {
					container.connectToServer(this, endpointURI);
				} catch (DeploymentException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		
			// callback hook for connection open events
			@OnOpen
			public void onOpen(Session session) {
				System.out.println("opening websocket");
				this.session = session;
			}
		
			// callback hook for connection close events
			@OnClose
			public void onClose(Session session, CloseReason closeReason) {
				System.out.println("closing websocket");
				this.session = null;
			}
		
			// callback hook for Message Events
			// This method will be invoked when a client send a message.
			@OnMessage
			public void onMessage(String message) {
				if (this.messageHandler != null) {
					this.messageHandler.handleMessage(message);
				}
			}
		
			// register message handler
			public void addMessagehandler(MessageHandler messageHandler) {
				this.messageHandler = messageHandler;
			}
		
			// send message
			public void sendMessage(String message) {
				this.session.getAsyncRemote().sendText(message);
			}
		
			// Message Handler
			public static interface MessageHandler {
				public void handleMessage(String message);
			}
		}
   	     
        
        
        
        
        