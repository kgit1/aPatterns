package aTestProblem;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Main {
	private static final String urlPath = "http://api.fixer.io/latest?base=USD";
	private static boolean working = true;
	public static Map<String, Object> currenciesData;
	public static Map<String, Double> currenciesRate;
	public static Map<DataDate, List<DataText>> programmData = new TreeMap<>();

	public static void main(String[] args) {

		currenciesData = parseCurrencies(getCurrencies());
		currenciesRate = new LinkedHashMap<>();

		currenciesRate.put("USD", (double) 1);
		currenciesRate.putAll((Map<String, Double>) currenciesData.get("rates"));

		programmRun();
	}

	public static String reader() {
		String data = "";
		InputStreamReader isr = new InputStreamReader(System.in);
		BufferedReader reader = new BufferedReader(isr);
		try {
			data = reader.readLine();
			System.out.println(data);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return data;
	}

	public static void programmRun() {
		String data;
		while (working) {

			data = reader();
			if (isCommand(data)) {
				String command = cutCommand(data);

				switch (command) {

				case "add":
					commandAdd(addParser(data));
					break;

				case "list":
					commandList();
					break;

				case "clear":
					commandClear(data);
					break;

				case "total":
					commandTotal(data);
					break;

				case "currencies":
					commandCurrencies();
					break;

				case "exchangeRates":
					commandExchangeRates();
					break;

				case "help":
					commandHelp();
					break;

				case "exit":
					working = false;
					break;

				}
			}
		}
	}

	public static String cutCommand(String data) {
		String[] temp = data.split(" ");
		String command = "";
		if (temp.length > 0) {
			command = temp[0];
		}
		return command;
	}

	public static List<String> addParser(String data) {
		List<String> dataArray = new ArrayList<>();
		List<String> tempArray = Arrays.asList(data.split(" "));

		if (tempArray.size() >= 5 && isValidDate(tempArray.get(1)) && isDouble(tempArray.get(2))
				&& isCurrency(tempArray.get(3)) && isCorrectLength(tempArray.get(4))) {
			if (tempArray.size() > 5) {

				String tempString = "";
				for (int i = 4; i < tempArray.size(); i++) {
					tempString += tempArray.get(i) + " ";
				}
				if (isCorrectLength(tempString)) {
					dataArray.add(tempArray.get(0));
					dataArray.add(tempArray.get(1));
					dataArray.add(tempArray.get(2));
					dataArray.add(tempArray.get(3));
					dataArray.add(tempString.trim());
				}
			} else {
				dataArray = tempArray;
			}
			return dataArray;
		}
		System.out.println("Error: wrong add format: " + data);
		System.out.println("Please, use correct format: add 2017-04-25 12 USD Jogurt");
		return new ArrayList<String>();
	}

	public static void commandAdd(List<String> data) {
		if (data.size() > 0) {
			List<String> dateList = new ArrayList<>(Arrays.asList(data.get(1).split("-")));
			DataDate date = new DataDate(Integer.parseInt(dateList.get(0)), Integer.parseInt(dateList.get(1)),
					Integer.parseInt(dateList.get(2)));

			DataText text = new DataText(Double.parseDouble(data.get(2)), data.get(3), data.get(4));

			if (programmData.containsKey(date)) {
				programmData.get(date).add(text);
				System.out.println(date);
				for (DataText dataText : programmData.get(date)) {
					System.out.println("\t" + dataText);
				}
			} else {
				ArrayList<DataText> textArray = new ArrayList<>();
				textArray.add(text);
				programmData.put(date, textArray);
				System.out.println(date);
				System.out.println("\t" + text);
			}
		}
	}

	public static void commandList() {
		System.out.println("===========================================================");
		for (Entry<DataDate, List<DataText>> entry : programmData.entrySet()) {

			System.out.println(entry.getKey());
			for (DataText text : entry.getValue()) {
				System.out.println("\t" + text);
			}
		}
		System.out.println("===========================================================");
	}

	public static void commandClear(String data) {
		List<String> dataArray = new ArrayList<>();
		dataArray = Arrays.asList(data.split(" "));
		if (dataArray.size() == 2 && isValidDate(dataArray.get(1))) {
			List<String> dateList = new ArrayList<>(Arrays.asList(dataArray.get(1).split("-")));
			DataDate date = new DataDate(Integer.parseInt(dateList.get(0)), Integer.parseInt(dateList.get(1)),
					Integer.parseInt(dateList.get(2)));
			if (programmData.containsKey(date)) {
				programmData.remove(date);
				System.out.println(date + " successfully removed");
			} else {
				System.out.println("Can't find " + date + " in the list");
			}

		} else {
			System.out.println("Error: wrong clear format " + data);
			System.out.println("Please, use correct format: clear 2017-10-22");
		}
	}

	public static void commandTotal(String data) {
		List<String> dataArray = new ArrayList<>(Arrays.asList(data.split(" ")));
		if (dataArray.size() == 2) {
			double total = 0;
			String currency = dataArray.get(1);
			if (isCurrency(currency)) {
				for (Entry<DataDate, List<DataText>> entry : programmData.entrySet()) {
					List<DataText> listData = entry.getValue();
					for (DataText dataText : listData) {
						if (dataText.getSpent() > 0) {
							if (dataText.getCurrency().equals("USD")) {
								total += dataText.getSpent();
							} else {
								double tempValue = currenciesRate.get(dataText.getCurrency());

								total += dataText.getSpent() / tempValue;
							}
						}
					}
				}
				if (!currency.equals("USD")) {
					double tempValue = currenciesRate.get(currency);

					total = total * tempValue;
				}

				String result = "0";
				if (total != 0) {
					DecimalFormat df = new DecimalFormat("#.##");
					result = df.format(total);
				}
				System.out.println(result + " " + currency);
			}
		} else {
			System.out.println("Error: wrong total format: " + data);
			System.out.println("Please, use correct format: total PLN");
		}
	}

	public static void commandCurrencies() {
		for (Entry<String, Double> entry : currenciesRate.entrySet()) {
			System.out.print(entry.getKey() + " ");
		}
	}

	public static void commandExchangeRates() {
		for (Entry<String, Double> entry : currenciesRate.entrySet()) {
			System.out.println(entry.getKey() + ":" + entry.getValue());
		}
	}

	public static void commandHelp() {
		System.out.println("===========================================================");
		System.out.println("Commands: add, list, clear, total, currencies, exchangeRates, help, exit");
		System.out.println("Correct commands format example");
		System.out.println("add 2017-04-25 12 USD Jogurt");
		System.out.println("list");
		System.out.println("clear 2017-04-25");
		System.out.println("total PLN");
		System.out.println("currencies");
		System.out.println("exchangeRates");
		System.out.println("help");
		System.out.println("exit");
		System.out.println("===========================================================");
	}

	public static String getCurrencies() {
		String result = "";

		HttpURLConnection httpURLConnection = null;
		InputStreamReader reader = null;

		try {
			URL url = new URL(urlPath);
			httpURLConnection = (HttpURLConnection) url.openConnection();

			reader = new InputStreamReader(httpURLConnection.getInputStream());

			int inputData = reader.read();

			while (inputData > -1) {
				char current = (char) inputData;
				result += current;
				inputData = reader.read();
			}
			reader.close();
			// System.out.println("Result string " + result);

		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				try {
					reader.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			if (httpURLConnection != null) {
				httpURLConnection.disconnect();
			}
		}
		return result;
	}

	public static Map<String, Object> parseCurrencies(String currencies) {
		Map<String, Object> currenciesData = new HashMap<>();

		ObjectMapper objectMapper = new ObjectMapper();

		try {
			Map<String, Object> mapObject = objectMapper.readValue(currencies,
					new TypeReference<Map<String, Object>>() {
					});
			Map<String, Integer> rates = (Map<String, Integer>) mapObject.get("rates");

			currenciesData.put("base", mapObject.get("base"));
			currenciesData.put("date", mapObject.get("date"));
			currenciesData.put("rates", mapObject.get("rates"));

		} catch (JsonParseException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return currenciesData;
	}

	public static boolean isCommand(String data) {
		boolean result = false;
		if (data.startsWith("add ") || data.equals("list") || data.startsWith("clear ") || data.startsWith("total ")
				|| data.equals("currencies") || data.equals("exchangeRates") || data.equals("help")
				|| data.equals("exit")) {
			result = true;
		} else {
			System.out.println("Error: wrong format or no such command: " + data);
			System.out.println("Type help for list of proper commands format");
		}
		return result;
	}

	public static boolean isInteger(String number) {
		try {
			Integer.parseInt(number);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		return true;
	}

	public static boolean isDouble(String number) {
		try {
			Double.parseDouble(number);
		} catch (NumberFormatException e) {
			return false;
		} catch (NullPointerException e) {
			return false;
		}
		return true;
	}

	public static boolean isValidDate(String date) {
		List<String> dateChecker = new ArrayList<>(Arrays.asList(date.split("-")));
		if (date != null && dateChecker.size() == 3) {
			if (isInteger(dateChecker.get(0)) && isInteger(dateChecker.get(1)) && isInteger(dateChecker.get(2))) {
				int year = Integer.parseInt(dateChecker.get(0));
				int month = Integer.parseInt(dateChecker.get(1));
				int day = Integer.parseInt(dateChecker.get(2));

				{
					if (year > 2000 && year < 2050) {
						if (month > 0 && month <= 12) {
							if (day > 0 && day <= 31) {
								if (month == 2) {
									if (year % 4 == 0) {
										if (day <= 29) {
											return true;
										}
									} else if (day <= 28) {
										return true;
									} else {
										return false;
									}
								}
								return true;
							}
						}
					}

				}
			}
		}
		System.out.println("Error: Wrong date: " + date);
		System.out.println(
				"Please, use right input format for date: YYYY-mm-dd (2017-04-25) and year must be between 2000-2050");
		return false;
	}

	public static boolean isCurrency(String currency) {
		if (currenciesRate.containsKey(currency)) {
			return true;
		} else {
			System.out.println("Error: Currency invalid, please choose next time one of ");
			for (Entry<String, Double> entry : currenciesRate.entrySet()) {
				System.out.print(entry.getKey() + " ");
			}
			System.out.println();
		}

		return false;
	}

	public static boolean isCorrectLength(String product) {
		if (product.length() <= 30) {
			return true;
		} else {
			System.out.println("Error: wrong products description format: " + product);
			System.out.println("Please, don't choose products description longer than 30 symbols");
		}
		return false;
	}

}
// add 2017-04-25 12 USD Jogurt
// list
// clear 2017-04-25
// total PLN

// add 2017-04-25 12 USD Jogurt
// add 2011-04-25 12 USD Jogurt
// add 2017-05-25 15 BRL Jogurt
// add 2017-04-26 12 AUD Jogurt




















package aTestProblem;

public class DataDate implements Comparable<DataDate> {

	private int year;
	private int month;
	private int day;

	public DataDate(int year, int month, int day) {
		this.year = year;
		this.month = month;
		this.day = day;
	}

	public int getYear() {
		return year;
	}

	public void setYear(int year) {
		this.year = year;
	}

	public int getMonth() {
		return month;
	}

	public void setMonth(int month) {
		this.month = month;
	}

	public int getDay() {
		return day;
	}

	public void setDay(int day) {
		this.day = day;
	}

	@Override
	public String toString() {
		return year + "-" + month + "-" + day;
	}

	@Override
	public int compareTo(DataDate date) {
		if (this.getYear() == date.getYear()) {

			if (this.getMonth() == date.getMonth()) {

				if (this.getDay() > date.getDay()) {
					return 1;
				} else if (this.getDay() < date.getDay()) {
					return -1;
				}
				return 0;

			} else if (this.getMonth() > date.getMonth()) {
				return 1;
			} else if (this.getMonth() < date.getMonth()) {
				return -1;
			}
			return 0;
		} else if (this.getYear() > date.getYear()) {
			return 1;
		} else if (this.getYear() < date.getYear()) {
			return -1;
		}
		return 0;
	}

}











package aTestProblem;

public class DataText {

	private int spent;
	private String currency;
	private String product;

	public DataText(int spent, String currency, String product) {
		this.spent = spent;
		this.currency = currency;
		this.product = product;
	}

	public int getSpent() {
		return spent;
	}

	public void setSpent(int spent) {
		this.spent = spent;
	}

	public String getCurrency() {
		return currency;
	}

	public void setCurrency(String currency) {
		this.currency = currency;
	}

	@Override
	public String toString() {
		return " " + spent + " " + currency + " " + product;
	}

}



# TestProblem
Personal expenses management application that allows users to track how much money have they spent.
(Little changed output formating to be little clear and show only entered date expenses on use of add command, 
only list command shows all expenses for all dates.
And currencies exchange rates are requested only at application start, not every time on total command execute)

Application could be run from precompiled jar file TestProblem.jar in jar folder 
or from Main.class as java application. Tests in test folder, could be run all together by suite AllTests.class
To run from command line use command:
java -jar TestProblem.jar
executed from files root directory

#List of commands 
add, list, clear, total, currencies, help, exchangeRates, exit

add 2017-04-25 12 USD Jogurt  
adds expences entry to the list of user expences. Expences for various dates could be added in any order. Command accepts following parameters:
2017-04-25 - is the date when expences occured(choose date between 2000-2050)
12 - is an amount of money spent
USD - the currency in which expense occured
Jogurt - is the name of product purchased (allows products name up to 29 symbols)

list
shows the list of all expenses sorted by date

clear 2017-04-25
removes all expenses for specified date, where 
2017-04-25 - is the date on which expenses should be removed

total PLN
this command calculates the total amount of money spent and present it to use in specified currency, where
PLN - is the currency in which total amoun of expenses shoul be presented

currencies
list of currencies you can use in programm

exchangeRates
exchange rates of available currencies

help
presents list of available commands

exit
stops programm 

correct commands format
add -> add 2017-04-25 12 USD Jogurt
